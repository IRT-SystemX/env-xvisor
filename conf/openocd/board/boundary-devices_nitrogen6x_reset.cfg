#
# This file is part of Xvisor Build Environment.
# Copyright (C) 2015 Institut de Recherche Technologique SystemX
# Copyright (C) 2015 OpenWide
# All rights reserved.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this Xvisor Build Environment. If not, see
# <http://www.gnu.org/licenses/>.
#
# @file conf/openocd/board/boundary-devices_nitrogen6x_reset.cfg
#

proc disable_interrupts {} {
    # Keep the mode to 0x13, the supervisor mode
    reg cpsr 0x13
}

proc cache_disable {mask} {
    set scr [arm mrc 15 0 1 0 0]
    sleep 1
    # Syntax: arm mcr cpnum op1 CRn CRm op2 value
    arm mcr 15 0 1 0 0 [expr $scr & ~($mask)]
}

proc icache_disable {} {
    # I-Cache 1 << 12
    cache_disable 0x1000
}

proc CP15ISB {} {
    arm mcr 15 0 7 5 4 0x0
}

proc CP15DSB {} {
    arm mcr 15 0 7 10 4 0x0
}

proc CP15DMB {} {
    arm mcr 15 0 7 10 5 0x0
}

proc invalidate_icache_all {} {
    #
    # Invalidate all instruction caches to PoU.
    # Also flushes branch target cache.
    #
    arm mcr 15 0 7 5 0 0x0

    # Invalidate entire branch predictor array */
    arm mcr 15 0 7 5 6 0x0

    # Full system DSB - make sure that the invalidation is complete */
    CP15DSB

    # ISB - make sure the instruction stream sees it */
    CP15ISB
}


# turn off D-cache
# dcache_disable() in turn flushes the d-cache and disables MMU
proc dcache_disable {} {
    # MMU enable 1 << 0, D-Cache 1 << 2
    cache_disable [expr (1 << 2) | (1 << 0)]
}

proc v7_outer_cache_disable {} {
    # Nothing to do on armv7
}

proc v7_outer_cache_inval_all {} {
    # Nothing to do on armv7
}

# Write the level and type you want to Cache Size Selection Register(CSSELR)
# to get size details from Current Cache Size ID Register(CCSIDR)
proc set_csselr {level type} {
    # Write to Cache Size Selection Register(CSSELR)
    arm mcr 15 2 0 0 0 [expr ($level << 1) | $type]
}

proc v7_maint_dcache_level_setway {level operation} {
    # puts [format "level: %i, operation: %i" $level $operation]
    puts "TODO"
}

proc v7_maint_dcache_all {operation} {
    set clidr [arm mrc 15 1 0 0 1]
    puts [format "CLIDR: 0x%08X" $clidr]

    set level_start_bit 0

    for {set level 0} {$level < 7} {incr level} {
	set cache_type [expr ($clidr >> $level_start_bit) & 0x7]
	#define ARMV7_CLIDR_CTYPE_DATA_ONLY		2
	#define ARMV7_CLIDR_CTYPE_INSTRUCTION_DATA	3
	#define ARMV7_CLIDR_CTYPE_UNIFIED		4
	puts [format "level %i, cache_type: 0x%X" $level $cache_type]
	if {($cache_type == 2) || ($cache_type == 3) || ($cache_type == 4)} {
	    v7_maint_dcache_level_setway $level $operation
	}
	incr level_start_bit 3
    }
}

# After D-cache is flushed and before it is disabled there may
# be some new valid entries brought into the cache. We are sure
# that these lines are not dirty and will not affect our execution.
# (because unwinding the call-stack and setting a bit in CP15 SCTRL
# is all we did during this. We have not pushed anything on to the
# stack. Neither have we affected any static data)
# So just invalidate the entire d-cache again to avoid coherency
# problems for kernel
# Inspired by i.MX6 U-Boot arch/arm/cpu/armv7/cpu.c,
# arch/arm/cpu/armv7/cache_v7.c, and arch/arm/lib/cache-cp15.c,

proc invalidate_dcache_all {} {
    v7_maint_dcache_all 1

    v7_outer_cache_inval_all
}

# Some CPU need more cache attention before starting the kernel.
proc cpu_cache_initialization {} {
}

proc cpu_reset {} {
    halt
    puts "Resetting CPU..."

    arm core_state arm

    # disable_interrupts
    # icache_disable
    # invalidate_icache_all
    # dcache_disable
    # v7_outer_cache_disable
    # invalidate_dcache_all

    # cpu_cache_initialization
    # puts [format "CP15 CR1 (SCR): 0x%08X" [arm mrc 15 0 1 0 0]]
    # poll
}


proc config_smp {} {
    set _TARGETNAME_1 $_CHIPNAME.cpu.1
    target create $_TARGETNAME_1 cortex_a -chain-position $_CHIPNAME.dap \
        -coreid 1 -dbgbase 0x82152000
    set _TARGETNAME_2 $_CHIPNAME.cpu.2
    target create $_TARGETNAME_2 cortex_a -chain-position $_CHIPNAME.dap \
        -coreid 2 -dbgbase 0x82154000
    set _TARGETNAME_3 $_CHIPNAME.cpu.3
    target create $_TARGETNAME_3 cortex_a -chain-position $_CHIPNAME.dap \
        -coreid 3 -dbgbase 0x82156000

    foreach {target} {$_TARGETNAME_1 $_TARGETNAME_2 $_TARGETNAME_3} {
	set target [expr $target]
	puts [format "Configuring %s" $target]
	$target configure -event reset-init cpu_reset
	$target configure -event reset-start { adapter_khz 1000 }
	$target configure -event reset-assert-post "imx6_dbginit $_TARGETNAME"
	$target configure -event gdb-attach { halt }
    }

    target smp $_TARGETNAME $_TARGETNAME_1 $_TARGETNAME_2 $_TARGETNAME_3
}
