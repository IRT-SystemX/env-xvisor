#! /usr/bin/env bash


# The called program name, i.e. configure with its path
PROGNAME=$0

# Default board name:
BOARDNAME=vexpress-a9

# Directory where the configure script is
which realpath &>/dev/null
if [ $? -ne 0 ]; then
  CURDIR=$(dirname ${PROGNAME})
else
  CURDIR=$(realpath $(dirname ${PROGNAME}))
fi

# Script directory
SCRIPTDIR=${CURDIR}/scripts

# Make file directory
MAKEDIR=${CURDIR}/make

# Configuration file directory
CONFDIR=${CURDIR}/conf

# Build directory, used by this script to write the resulting configuration
# (the next variable)
BUILDDIR=${CURDIR}/build

# Temporary file directory
TMPDIR=/tmp/xvisor_env-$(date "+%Y%m%d-%H%M%S")

# Downloaded archive directory
ARCDIR=${BUILDDIR}/archives

# Build stamp directory
STAMPDIR=${BUILDDIR}/stamps

# The target built rootfs
TARGETDIR=${BUILDDIR}/target

# The host build directory
HOSTDIR=${BUILDDIR}/host

# The resulting configuration
CONF=${BUILDDIR}/.env_config

# Does the board require busybox
BOARD_BUSYBOX=1

# Does the board will run under Qemu
BOARD_QEMU=0

# Verbosity option, that can be modify through the program arguments
VERBOSE=0



# Tool function used in this script
source ${SCRIPTDIR}/common.sh

board_list() {
    RET=$1

    if [ -z "${RET}" ]; then
	RET=1
    fi

    if [ ${RET} -eq 1 ]; then
	OUTPUT=/dev/stderr
    else
	OUTPUT=/dev/stdout
    fi

    printf "${BOLD}Available board support:${NORMAL}\n"
    printf "  - vexpress-a9:\tARM Versatile Express A9\n"
    printf "\t\t\tThe reference platform to emulate the hypervisor.\n"
    printf "  - nitrogen6x:\t\tBoundary Devices Nitrogen6x platform\n"
    printf "\t\t\tThe real board to run the hypervisor on.\n"

    exit ${RET}
}

option_board() {
    BOARD_CONF="${CONFDIR}/${BOARDNAME}.conf"
    print "Sourcing \"${BOARD_CONF}\"\n"
    source ${BOARD_CONF}
    source ${CONFDIR}/${ARCH}.conf
    source ${CONFDIR}/components.conf

    for elt in BUSYBOX UBOOT LOADER OPENOCD LIBFTDI; do
	BOARD_ELT=BOARD_${elt}
	if [ -z "${!BOARD_ELT}" ]; then
	    continue
	fi

	if [ ${!BOARD_ELT} -eq 1 ]; then
	    COMPONENTS="${COMPONENTS} ${elt}"
	fi
    done

    if [ ${BOARD_LOADER} -eq 1 -o ${BOARD_OPENOCD} -eq 1 ]; then
	printf "If you use Kermit, you can find a configuration file example "
	printf "\"${CONFDIR}/kermrc\".\n"
    fi
}

# Check if a binary exists, and add it to the install list otherwise
# $1: Test if the binary is necessary (set to 1 to force)
# $2: The binary to test
# $3: The Debian package name
# $4: The Gentoo package name
# $5: The optional Gentoo environment to install the package
package_check_binary() {
    TEST=$1
    BIN=$2
    PKG_DEBIAN=$3
    PKG_GENTOO=$4
    ENV_GENTOO=$5

    if [ ${TEST} -ne 1 ]; then
	return
    fi

    which ${BIN} &>/dev/null
    if [ $? -ne 0 ]; then
	INSTALL_DEBIAN="${INSTALL_DEBIAN} ${PKG_DEBIAN}"
	if [ -n "${ENV_GENTOO}" ]; then
	    INSTALL_GENTOO="${ENV_GENTOO} ${INSTALL_GENTOO}"
	fi
	INSTALL_GENTOO="${INSTALL_GENTOO} ${PKG_GENTOO}"
    fi
}

# Check that the required packages, depending on the target, are installed
packages_check() {
    INSTALL_DEBIAN=""
    INSTALL_GENTOO="emerge -av --quiet-build"
    NCURSE_TMP="${TMPDIR}/ncurse_tmp"

    # Check that realpath, used for these scripts is available
    package_check_binary 1 realpath realpath "realpath" "app-misc/realpath"

    # Checking that Qemu is installed
    package_check_binary ${BOARD_QEMU} qemu-system-${QEMU_ARCH} "qemu" \
	"app-emulation/qemu" "QEMU_SOFTMMU_TARGETS=${QEMU_ARCH}"

    # Checking that fakeroot, used by Busybox, is installed
    package_check_binary ${BOARD_BUSYBOX} fakeroot "fakeroot" \
	"sys-apps/fakeroot"

    # Checking that libtool, used by autotools, is installed
    package_check_binary ${BOARD_OPENOCD} libtool "libtool" "sys-devel/libtool"

    # Checking that telnet, useful with openocd
    package_check_binary ${BOARD_OPENOCD} telnet "telnet" \
	"net-misc/netkit-telnetd"

    # Check the tool required to create the rootfs image
    TOOL=
    ROOTFS_IMG_SUFFIX=$(echo ${ROOTFS_IMG} | sed -re 's|.*\.(.+)|\1|')
    case ${ROOTFS_IMG_SUFFIX} in
	(ext2)
	    TOOL=genext2fs
	    DEBIAN_PKG=genext2fs
	    GENTOO_PKG=sys-fs/genext2fs
	    ;;
	(*)
	    printf "Unknown suffix \"${ROOTFS_IMG_SUFFIX}\" in the rootfs image "
	    echo "name \"${ROOTFS_IMG}\", exiting..."
	    exit 1
    esac
    package_check_binary 1 "${TOOL}" "${DEBIAN_PKG}" "${GENTOO_PKG}"

    # Checking that Ncurses is installed
    mkdir -p $(dirname ${NCURSE_TMP})
    cat > ${NCURSE_TMP}.c <<-EOF
	#include <curses.h>

	int main()
	{
	  return 0;
	}
	EOF
    gcc -lncurses ${NCURSE_TMP}.c -o ${NCURSE_TMP} &>/dev/null
    if [ $? -ne 0 ]; then
	INSTALL_DEBIAN="${INSTALL_DEBIAN} libncurses5-dev"
	INSTALL_GENTOO="${INSTALL_GENTOO} \">=sys-libs/ncurses-5\""
    fi
    rm -f ${NCURSE_TMP} ${NCURSE_TMP}.c

    # Display a summary if required
    if [ -n "${INSTALL_DEBIAN}" ]; then
	printf "${BOLD}Please install the following packages before "
	printf "continuing:${NORMAL}\n"
	printf "${BOLD}For Debian/Ubuntu:${NORMAL}\n"
	printf "  sudo apt-get install ${INSTALL_DEBIAN}\n"
	printf "${BOLD}For Gentoo:${NORMAL}\n"
	printf "  sudo ${INSTALL_GENTOO}\n"
	exit 1
    fi
}

config_write() {
    print "${BOLD}Components:${NORMAL} ${COMPONENTS}\n"

    mkdir -p $(dirname ${CONF})

    echo "# Configuration generated on $(date)" > ${CONF}
    echo "# by ${USER} on ${HOSTNAME}" >> ${CONF}
    printf "\n\n" >> ${CONF}

    echo "# File server" >> ${CONF}
    echo "FILE_SERVER=${FILE_SERVER}" >> ${CONF}
    printf "\n\n" >> ${CONF}

    echo "# Environment configuration" >> ${CONF}
    echo "COMPONENTS=\"${COMPONENTS}\"" >> ${CONF}
    for elt in CURDIR MAKEDIR SCRIPTDIR BUILDDIR TARGETDIR HOSTDIR ARCDIR \
	STAMPDIR TMPDIR CONFDIR ROOTFS_IMG QEMU_IMG BUILD_VERBOSE BUILD_DEBUG \
	PARALLEL_JOBS; do
	echo "${elt}=${!elt}" >> ${CONF}
    done
    printf "\n\n" >> ${CONF}

    echo "# Board configuration" >> ${CONF}
    for elt in BOARDNAME ARCH QEMU_ARCH BOARD_BUSYBOX BOARD_QEMU BOARD_LOADER \
	BOARD_UBOOT TOOLCHAIN_PREFIX ADDR_HYPER ADDR_DISK; do
	echo "${elt}=${!elt}" >> ${CONF}
    done

    echo ".DEFAULT_GOAL=${DEFAULT_GOAL}" >> ${CONF}

    printf "\n\n# Components\n" >> ${CONF}
    for component in ${COMPONENTS}; do
	COMPONENT_VERSION=${component}_VERSION
	COMPONENT_PATH=${component}_PATH
	COMPONENT_CONF=${component}_CONF
	COMPONENT_FILE=${component}_FILE
	COMPONENT_REPO=${component}_REPO
	COMPONENT_BRANCH=${component}_BRANCH

	echo "${COMPONENT_VERSION}=${!COMPONENT_VERSION}" >> ${CONF}
	echo "${COMPONENT_PATH}=${!COMPONENT_PATH}" >> ${CONF}
	echo "${COMPONENT_CONF}=${!COMPONENT_CONF}" >> ${CONF}

	# If the component is on a git repository, get its path...
	if [ -n "${!COMPONENT_REPO}" ]; then
	    echo "${COMPONENT_REPO}=${!COMPONENT_REPO}" >> ${CONF}
	    # ... and its branch
	    if [ -n "${!COMPONENT_BRANCH}" ]; then
		echo "${COMPONENT_BRANCH}=${!COMPONENT_BRANCH}" >> ${CONF}
	    else
		echo "${COMPONENT_REPO}=master" >> ${CONF}
	    fi
	# Otherwise, it is provided with a archive file
	else
	    echo "${COMPONENT_FILE}=${!COMPONENT_FILE}" >> ${CONF}
	fi
	echo "${component}_DIR=${BUILDDIR}/${!COMPONENT_PATH}" >> ${CONF}
	printf "${component}_BUILD_DIR=${BUILDDIR}/build_" >> ${CONF}
	printf "${!COMPONENT_PATH}\n" >> ${CONF}
	printf "${component}_BUILD_CONF=${BUILDDIR}/build_" >> ${CONF}
	printf "${!COMPONENT_PATH}/.config\n" >> ${CONF}
	echo >> ${CONF}
    done

    for elt in MEMIMG XVISOR_BIN XVISOR_IMX DISK_DIR UBOOT_BOARD_CFG \
	UBOOT_MKIMAGE UBOOT_BOARDNAME; do
	echo "${elt}=${!elt}" >> ${CONF}
    done
    printf "\n" >> ${CONF}
}

pre_option_check
option_parse $*
option_board
packages_check
config_write
