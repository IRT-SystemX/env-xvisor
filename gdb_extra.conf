define scheduler_debug
  set $i = 0
  while ($i < mngr.vcpu_count)
    p mngr.vcpu_array[$i].name
    p /x mngr.vcpu_array[$i].regs.pc
    info symbol mngr.vcpu_array[$i].regs.pc
    # p /x mngr.vcpu_array[$i].regs.lr
    # info symbol mngr.vcpu_array[$i].regs.lr
    if (2 == mngr.vcpu_array[$i].state.counter)
      echo "Reset\n"
    end
    if (4 == mngr.vcpu_array[$i].state.counter)
      echo "Ready\n"
    end
    if (8 == mngr.vcpu_array[$i].state.counter)
      echo "Running\n"
    end
    if (16 == mngr.vcpu_array[$i].state.counter)
      echo "Paused\n"
    end
    if (32 == mngr.vcpu_array[$i].state.counter)
      echo "Halted\n"
    end
    set $i = $i + 1
  end
end

define vcpu_sched_list
  set $rqi = (struct vmm_schedalgo_rq *)((&percpu_sched)->rq)
  set $p = 8
  while $p
    set $p = $p - 1
    set $list = &((struct vmm_schedalgo_rq *)percpu_sched.rq)->list[$p]
    if $list->next == $list
      printf "No VCPU of priority %d\n", $p
      loop_continue
    end
    printf "VCPU priority %d\n", $p
    set $entry = (struct vmm_schedalgo_rq_entry *)$list->next
    while 1
      # mon clean_invalidate_dcache_mva_range $entry ($entry + sizeof (struct vmm_schedalgo_rq_entry))
      printf "  %s (pc at 0x%x)\n", $entry->vcpu->name, $entry->vcpu->regs.pc
      set $entry = $entry->head->next
      loop_break
    end
  end
end
